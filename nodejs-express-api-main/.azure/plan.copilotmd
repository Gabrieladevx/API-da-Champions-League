# Plano de Deploy para Podcast Manager API

## Objetivo

Publicar a API Node.js (TypeScript) no Azure App Service (Linux), com build via Oryx (npm install + npm run build) e execução via `npm start`. Incluir Application Insights e Log Analytics para observabilidade.

## Projeto
- Stack: Node.js + TypeScript, sem Express (HTTP nativo)
- Build: tsup (gera `dist`)
- Start: `node dist/server.js`
- Rotas: `GET /api/list` e `GET /api/podcasts?p=...`
- Configs importantes: usa `process.env.PORT` (convertido p/ número) e `process.env.HOST` (definiremos `0.0.0.0` no App Service)

## Recursos Azure
- App Service Plan (Linux)
- Web App (Linux, stack Node LTS)
- Log Analytics Workspace
- Application Insights conectado ao workspace

## Parâmetros e app settings sugeridos
- appName: nome único global (ex.: podcast-manager-api-sufixo)
- location: região (ex.: brazilsouth)
- sku: B1 (básico) para dev/teste
- App Settings no Web App:
  - HOST=0.0.0.0 (para ouvir na rede do container)
  - APPLICATIONINSIGHTS_CONNECTION_STRING (injetado via Bicep)
  - APPINSIGHTS_INSTRUMENTATIONKEY (injetado)

## Passos de execução (via Azure CLI)
1) Criar grupo de recursos:
   - az group create -n NOME_DO_RG -l REGIAO
2) Implantar infraestrutura (what-if primeiro e depois create):
   - az deployment group what-if -g NOME_DO_RG -f infra/main.bicep -p appName=NOME_BASE
   - az deployment group create -g NOME_DO_RG -f infra/main.bicep -p appName=NOME_BASE
3) Fazer deploy da app (Oryx):
   - Config padrão do App Service Linux com Node usará Oryx: `npm ci/install`, `npm run build` e `npm start`.
   - Garanta que `package.json` contém `build` e `start`.
4) Logs e diagnóstico:
   - Ativar logs de app e consultar no Application Insights / Log Stream do App Service.

## Observações
- Porta: App Service define PORT (geralmente 8080). A aplicação já usa `process.env.PORT`.
- Host: setar HOST=0.0.0.0 no App Service para bind externo.
- Alternativa: Dockerizar e usar Web App for Containers ou Container Apps; não é necessário aqui.
